Let p(x) be a polynomial of degree n, that is, p(x) = ∑n
i=0 aixi
.
(a) Describe a simple O(n2)-time algorithm for computing p(x).
(b) Describe an O(nlogn)-time algorithm for computing p(x), based upon
a more efficient calculation of xi
.
(c) Now consider a rewriting of p(x) as
p(x) = a0 +x(a1 +x(a2 +x(a3 +···+x(an−1 +xan)···))),
which is known as Horner’s method. Using the big-Oh notation, characterize
the number of arithmetic operations this method executes.


a)
sum = 0
for term in polynomiall:
    temp = term_degree
    for _ in range(term_degree):
        temp = temp*x
    sum += a*temp
return sum


b)
http://rookieslab.com/posts/
fast-power-algorithm-exponentiation-by-squaring-cpp-python-implementation
def fast_power(base, power):
    result = 1
    while power > 0:
        if power % 2 == 0 :
            # dvide the power by 2
            power = power // 2
            # multiply base to itself
            base = base * base
        else:
            power = power - 1
            result = result * base

            power = power // 2
            base = base * base
    return result
c)

def hornet(polynomial):
    if len(ponlonomial) == 1:
        return pol[0]
    else:
        return polynomial[0] + x*hornet(polynomial[1:])

evry iteration we are 'checkin' and removing one term. So its O(n)